- dataId = tabId+'_data'


%h3{:style=>"margin:5px 0;"}
  Query Results
%strong Site: 
=site
%br
%strong Variable: 
=variable
&ndash;
%strong Date: 
-if !start_date.nil?
  -if start_date > end_date
    ERROR - start date should not come after end date
  -else
    =start_date.to_date.to_formatted_s(:long).gsub('00:00','')
    ="-" 
    = end_date.to_date.to_formatted_s(:long).gsub('00:00','')
=clear_break
%br
-# #pagination-links
-# = pagination_links(@query, params[:page], 10)  

-if row_array.empty?
  Sorry.  There is no Data for your search.

  :javascript
    console.log('FAILURR RESULT TABID: #{tabId}');
    console.log('FAILURR RESULT DATAID: #{dataId}');
    var #{dataId} = {};
    #{dataId}.value_data = #{data_vals.to_json};
    #{dataId}.data = #{graph_data.as_json};
    console.log('DATAID object:',#{dataId});

-else
  = javascript_include_tag(:defaults, "jquery.flot.min.js", "jquery.flot.selection.min.js","jquery.flot.navigate.min.js")
  
  
  :css
    div.zobutton {
        font-size: smaller;
        color: #999;
        background-color: #eee;
        padding: 4px;
    }
     .zobutton {
        position: absolute;
        cursor: pointer;
    }

    div.zibutton {
        font-size: smaller;
        color: #999;
        background-color: #eee;
        padding: 2px;
    }
     .zibutton {
        position: absolute;
        cursor: pointer;
    }
    
  :javascript
    dojo.require("dijit.dijit");
    dojo.require("dijit.Dialog");
    dojo.require("dijit.form.Form");
    dojo.require("dijit.form.Button");
    dojo.require("dojox.form.Uploader");
    dojo.require("dojox.grid.EnhancedGrid");
    dojo.require("dojox.grid.enhanced.plugins.NestedSorting");
    dojo.require("dojox.grid.enhanced.plugins.Filter");
    dojo.require("dijit.layout.TabContainer");
    dojo.require("dojox.grid.enhanced.plugins.IndirectSelection");
    dojo.require("dojox.grid.enhanced.plugins.Pagination");
    //dojo.require("dojox.charting.Chart2D");
    //dojo.require("dojox.charting.DataChart");
    //dojo.require("dojox.charting.StoreSeries");
    //dojo.require("dojox.charting.DataSeries");
    //dojo.require("dojo.store.Observable");
    //dojo.require("dojo.store.Memory");
    //dojo.require("dojox.charting.themes.Claro");
    dojo.require("dojo.data.ItemFileReadStore");
    dojo.require("dojo.data.ItemFileWriteStore");
    dojo.require("dojox.grid.enhanced.plugins.exporter.CSVWriter");

    console.log('RESULT -TABID: #{tabId}');
    var #{dataId} = {};
    #{dataId}.value_data = #{data_vals.to_json};
    for(var i=0;i<#{dataId}.value_data.length;i++) 
      #{dataId}.value_data[i]['selected'] = 0;
    #{dataId}.data = #{graph_data.as_json};
    
    console.log('1RESULT -DATAID(#{dataId}):',#{dataId});
    
    //#{dataId}.values_json = {identifier: 'id', items: #{dataId}.value_data };
    
    console.log('2RESULT -DATAID(#{dataId}):',#{dataId});
    
    //#{dataId}.val_store = new dojo.data.ItemFileReadStore({data: {identifier: 'id', items: #{dataId}.value_data }});
    #{dataId}.val_store = new dojo.data.ItemFileWriteStore({data: {identifier: 'id', items: #{dataId}.value_data }});
    
    /***
    #{dataId}.dvalue_store = dojo.store.Observable(new dojo.store.Memory({
        data: {
            identifier: "id",
            label: "data values",
            items: #{dataId}.value_data
        }
    }));
    ***/
    console.log('3RESULT -DATAID(#{dataId}):',#{dataId});
    
    //create select array / clear array
    /***
    #{dataId}.value_selection = [];
    function value_selection_clear(data_vals) {
      data_vals.value_selection = [];
      for(var i=0;i<data_vals.value_data.length;i++)
        data_vals.value_selection[i] = 0;
    };
    value_selection_clear(#{dataId});
    ***/
    #{dataId}.clear_value_selection = function() {
      var store = #{dataId}.val_store;
      var len = #{dataId}.value_data.length;
      for(var i=0;i<len;i++) {
        var item0 = #{dataId}.value_data[i];
        store.setValue(item0,'selected',0);
      };
      store.save({
        onError: function() {
          console.log('SAVE FAILED: clear_value_selection');
        }
      });
    }; 
    #{dataId}.select_value = function(item,value) {
      var store = #{dataId}.val_store;
      store.setValue(item,'selected',value);
    }; 
    #{dataId}.value_selected = function(item) {
      var store = #{dataId}.val_store;
      var val = store.getValue(item,'selected',0);
      if(typeof val=='boolean' && val) return true;
      if(typeof val!='boolean' && parseInt(val)) return true;
      return false;
    }; 
    
    //var chart1 = new dojox.charting.Chart2D("simplechart");
    function trans1(store, item){
      // let's create our object
      var o = {
        x: store.getValue(item, "local_date_time"),
        y: store.getValue(item, "data_value")
      };
      return o;
    }
    
    //chart1.addPlot("default", {type: "Lines"});
    //chart1.addAxis("x");
    //chart1.addAxis("y", {vertical: true});
    //var series = new dojox.charting.DataSeries(value_store, { query: {id:"*"}}, trans1);
    //chart1.addSeries(value_data, {query: {id: "*"}}, trans1(value_data, ));
    //chart1.addSeries("DataValues", new dojox.charting.StoreSeries(dvalue_store, { query: { id: "*" } }, "local_date_time", "data_value"));
    //chart1.addSeries("Series 1", series);
    //chart1.render();

    //chart = new dojox.charting.DataChart("chartDiv" ,{type:dojox.charting.plot2d.Scatter,xaxis:{labelFunc:"seriesLabels"}});
    //chart.setStore(value_store, {symbol:"*"}, "data_value");  //  <-- single value property
    // set the layout structure:
    
    function exportAll() {
        dijit.byId("val_grid").exportGrid("csv", function(str) {
            dojo.byId("output").value = str;
        });
    };
    function exportSelected() {
        var str = dijit.byId("val_grid").exportSelected("csv");
        dojo.byId("output").value = str;
    };
    
    function getProperDate(local_date_time, rowIndex){
      return local_date_time.slice(0,local_date_time.length-6);
    }
    function addSelectedToDataSet(){
      //get the data values
      dijit.byId('#{tabId}_loading_dialog').show();
      var data_value_ids_string = ""
      data_array = #{dataId}.val_grid.selection.getSelected();
      for (i=0; i<data_array.length; i=i+1)
      {
        data_value_ids_string= data_value_ids_string + "&data_value_ids[]=" + data_array[i].id.toString();
      }
      //form has a hidden data_set_id
      $.post('#{root_url}projects/#{project_uid}/apivs/add_data_to_project_data_set.json?data_set_id=' + $("#data_set").val() + data_value_ids_string,
        function(data) {
          $('.result').html(data);
          dijit.byId('#{tabId}_loading_dialog').hide();
        });
    }
    //formatter: 'val_grid_formatter.dateTime',
    // grid formatters
    var val_grid_formatter = {};
    val_grid_formatter.dateTime = function(value) {
      if(value==null || value=='') return '-';
      // Format DateTime string
      var d = new Date(value);
      //var fmt = d.getMonth()+'/'+d.getFullYear()
      return dojo.date.locale.format(d,{datePattern:"yyyy-MM-dd", timePattern:"HH:mm:ss z"});
    };
    val_grid_formatter.selectItem = function(item) {
      //var checked_img = '<img src="/images/notice.png" alt="SELCT" />';
      var selected_img = '<img src="/images/1abu007.gif" alt="SELCT" />';
      var blank_img = '<img src="/images/blank.gif" width="16" height="16" />';
      
      if(#{dataId}.value_selected(item)) 
        return selected_img;
      return blank_img;
    };

    var val_layout = [{
       field: '_item',
       name: '-',
       formatter: val_grid_formatter.selectItem,
       width: '24px'
    },
    {
       field: 'local_date_time',
       name: 'Timestamp',
       formatter: val_grid_formatter.dateTime,
       width: '185px'
    },
    {
       field: 'vertical_offset',
       name: 'Vertical Offset',
       width: 'auto'
    },
    {
       field: 'data_value',
       name: 'Value',
       width: 'auto'
    },
    {
       field: 'string_value',
       name: 'Value(string format)',
       width: 'auto'
    },
    {
       field: 'quality_control_level',
       name: 'QC Level',
       width: 'auto'
    },
    {
       field: 'published',
       name: 'Published',
       width: 'auto'
    },
    {
       field: 'datatype',
       name: 'DataType',
       width: 'auto'
    },
    ];

    // create a new grid:
    var val_grid_click = false;
    #{dataId}.val_grid = new dojox.grid.EnhancedGrid({
       store: #{dataId}.val_store,
       grid_click: false,
       clientSort: true,
       rowSelector: '20px',
       indirectSelection: true,
       //rowSelector: '0',
       structure: val_layout,
       style: 'width:95%;',
       plugins: {filter:true, exporter:true,
         pagination:{
           sizeSwitch: true,
           position: "top",
           itemTitle: "Data Points"
       }},
       onClick: function(ev) {
         this.grid_click = ev;
       },
       onSelected: function(idx) {
         var item = this.getItem(idx);
         console.log('SELECT:',item);
         var point = #{dataId}.data[item._0];
         console.log('SELECT-PT:',point);
         if(!this.grid_click) return;
         //EDIT datavalue
         console.log('GRID CLICK:',item);
         console.log('CLICK EV:',this.grid_click);
         
         this.grid_click = false;
       },
       onFetchError: function(err) {
         console.log('GRID FETCH ERROR:',err);
       }
    },
    document.createElement('div'));
    #{dataId}.val_grid.changePageSize(10);

    // append the new grid to the div " ":
    //dojo.byId("gridContainer").appendChild(val_grid.domNode);
    
    
    $('##{tabId}_search_results #gridContainer').append(#{dataId}.val_grid.domNode);

    // Call startup, in order to render the grid:
    #{dataId}.val_grid.startup();
    
    // Setup tooltip removal on tab switch
    //var tabs = dijit.byId('tab_browser');
    //tabs.watch("selectedChild", function(name, oval, nval){
    //    console.log("changed TABs from: ", oval, " to ", nval);
    //    $("#tooltip").remove();
    //});    
    
    #{dataId}.plot = $.plot($("##{tabId}_search_results #placeholder"), [#{dataId}.data],{
           series: {
               color : "blue",
               lines: { show: true },
               points: { show: true }
              },

           grid:  { hoverable: true, clickable: true },
           xaxis: { mode: "time" },
           pan:   { interactive: true },
           zoom: {interative: true}
    });

    // add zoom out button 
    $('<div class="zobutton" style="right:20px;top:20px">-</div>').appendTo($("#placeholder")).click(function (e) {
       e.preventDefault();
       #{dataId}.plot.zoomOut();
    });
    $('<div class="zibutton" style="right:20px;top:43px">+</div>').appendTo($("#placeholder")).click(function (e) {
       e.preventDefault();
       #{dataId}.plot.zoom();
    });

    //Function ShowToolTip and previousPoint allow the hover function to display
     //a message for each data point on the graph when the cursor hoversover
     
     //I would only mess with the css if you really need to otherwise this
     //shouldn't need any modification
     function showTooltip(x, y, contents) {
       //delete tooltip_timeout;
       //var tooltip_timeout = setTimeout(function() {
       //  $("#tooltip").remove();
       //  delete tooltip_timeout;
       //},4000);
       $('<div id="tooltip">' + contents + '</div>').css( {
           position: 'absolute',
           display: 'none',
           'z-index': 1000,
           top: y + 5,
           left: x + 5,
           border: '1px solid #fdd',
           padding: '2px',
           'background-color': '#fee',
           opacity: 0.80
       }).appendTo("body").fadeIn(200);
     };

     //remove tooltip on mouseout
     //$("##{tabId}_search_results #placeholder").bind("onmouseout", function (event) {
     //  $("#tooltip").remove();
     //};


     //Most of this should remain the same
     //NOTE-- the time string for #x is in UTC format and currently is in GMT time
     #{dataId}.previousPoint = null;
     
     $("##{tabId}_search_results #placeholder").bind("plothover", function (event, pos, item) {
         var mEpoch = pos.x; // convert to milliseconds (Epoch is usually expressed in seconds, but Javascript uses Milliseconds)
         var dDate = new Date();
         dDate.setTime(mEpoch);
         $("#x").text(dDate.toLocaleString());
         $("#y").text(pos.y);

         if (item) {
             if (#{dataId}.previousPoint != item.datapoint) {
                 #{dataId}.previousPoint = item.datapoint;
                 $("#tooltip").remove();
                 var x = item.datapoint[0].toFixed(2),
                     y = item.datapoint[1].toFixed(2);
                     var mEpoch = x; // convert to milliseconds (Epoch is usually expressed in seconds, but Javascript uses Milliseconds)
                     dDate = new Date();
                     dDate.setTime(mEpoch);
                 showTooltip(item.pageX, item.pageY,
                   //*****You will need to change the sensor name here to the appropriate one selected above
                            //dDate.toLocaleString() + " = " + y + " " + "#{variable}|#{units}" );
                            val_grid_formatter.dateTime(dDate) + " = " + y + " " + "#{variable}|#{units}" );
             }
         } else {
             $("#tooltip").remove();
             #{dataId}.previousPoint = null;            
         }
     });
     
     // PLOTCLICK event to scroll to point on datagrid
     
     $("##{tabId}_search_results #placeholder").bind("plotclick", function (event, pos, item) {
         if(item) {
           //###SCROLL TO TOP of GRID
           //window.scrollTo(0,0);
           //$('html #main_container').animate({scrollTop:580}, 'slow');//IE, FF
           //$('body #main_container').animate({scrollTop:580}, 'slow');//chrome, safari
           var idx = item.dataIndex;
           var val_item = #{dataId}.value_data[idx];
           //var val_grid = dijit.byNode($('##{tabId}_search_results #gridContainer div')[0]);
           var val_grid = #{dataId}.val_grid;
           var store = #{dataId}.val_store;
           
           val_grid.selection.deselectAll();
           val_grid.scrollTo(0);
           val_grid.scrollToRow(idx);
           val_grid.selection.addToSelection(val_item);
           
           //value_selection_clear(#{dataId});
           //#{dataId}.value_selection[idx] = 1;
           #{dataId}.clear_value_selection();
           #{dataId}.select_value(val_item,1);
           
           val_grid.update();
         };
     });
     
     //###SCROLL TO SEARCH DIV
     //window.scrollTo(0,0);
     $('html #main_container').animate({scrollTop:220}, 'slow');//IE, FF
     $('body #main_container').animate({scrollTop:220}, 'slow');//chrome, safari
     //$('##{tabId}_search_results').animate({scrollTop:200}, 'slow');

  %h3{:style=>"margin:0 0 10px 0;width:56%;float:left;"}
    ="#{variable}|#{units}"
  -if !row_array.empty?
    -form_tag({:html=>{:style=>'float:left;'}, :controller=>'samples', :action=>'export'}) do 
      =hidden_field_tag('column_array', column_array.to_json)
      =hidden_field_tag('row_array', row_array.to_json)
      =hidden_field_tag('site_name', site)
      =hidden_field_tag('site', site_data.to_json)
      =hidden_field_tag('variable', variable_data.to_json)
      =hidden_field_tag('start_date', start_date)
      =hidden_field_tag('data_vals', data_vals.to_json)
      =hidden_field_tag('end_date', end_date)
      =submit_tag("Export Results")
    =clear_break
  -#simplechart{:style=>"width: 250px; height: 150px;"}
  -#chartDiv{:style=>"width: 250px; height: 150px;"}
  #placeholder{:style=>"width:600px;height:300px;"}
  -#=render_widget :flot_graph, :display, :variable=>variable, :data => graph_data
  -##value_store{:dojoType=>"dojo.data.ItemFileReadStore", :jsId=>"pvalues", :data=>"values_json"}
  -#%table{:dojoType=>"dojox.grid.EnhancedGrid", :plugins=> "{filter:true}",  :store=>"value_store", :clientSort=>"true", :style=>"width: 700px; height: 400px;", :jsId=>"ValueDisplayGrid", :id=>"ValueDisplayGrid", :title=>"Sites"}
  -#%thead
  -#%tr
  -#%th{:field=>"local_date_time", :width=>"190px", :filterable=>true} Timestamp
  -#%th{:field=>"vertical_offset", :width=>"130px", :filterable=>true} Vertical Offset
  -#%th{:field=>"data_value", :width=>"100px", :filterable=>true} Value
  %br
  #gridContainer{:style=>"width:900px;height:475px;"}
  -if current_user.projects.include?(Project.get(project_uid))
    %label{:id => "d_set", :onclick=>"dijit.byId('new_data_set').show();", :class => "icon icon-add", :onmouseover =>"this.style.cursor='hand'"}Data Set:
    = select_tag("data_set", data_set_options.html_safe)
    %button(dojoType="dijit.form.Button" name="add_data_button" id="add_data_button" onclick="addSelectedToDataSet();") 
      Add Selected Data to Data Set
  %br
  %br
  
  -# %button{:onclick=>"exportAll()"}
  -#   Export all to CSV
  -# %button{:onclick=>"exportSelected()"}
  -#   Export Selected Rows to CSV
  -# %br
  -# %textarea{:id=>"output"}

  -# -i=0
  -# %table
  -#   %tr
  -#     -column_array.each do |col|
  -#       %th
  -#         =col[0]
  -#   -row_array.each do |row|
  -#     -i=1-i
  -#     %tr{:class=>"row#{i}"}
  -#       -row.each do |col|
  -#         %td{:class =>"search-results"}
  -#           =col
:javascript
  dojo.addOnLoad(function() {
    
  });