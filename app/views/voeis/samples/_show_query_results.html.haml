%h3Query Results
For: Variable(
=variable
), Site(
=site
)
-if !start_date.nil?
  , Date(
  -if start_date > end_date
    ERROR - start date should not come after end date
  -else
    =start_date.to_date.to_formatted_s(:long).gsub('00:00','')
    ="-" 
    = end_date.to_date.to_formatted_s(:long).gsub('00:00','')
  ) 
=clear_break
-# #pagination-links
-# = pagination_links(@query, params[:page], 10)  


-if row_array.empty?
  Sorry.  There is no Data for your search.
-else
  -form_tag({:controller=>'samples', :action=>'export'}) do 
    =hidden_field_tag('column_array', column_array.to_json)
    =hidden_field_tag('row_array', row_array.to_json)
    =hidden_field_tag('site_name', site)
    =hidden_field_tag('site', site_data.to_json)
    =hidden_field_tag('variable', variable_data.to_json)
    =hidden_field_tag('start_date', start_date)
    =hidden_field_tag('data_vals', data_vals.to_json)
    =hidden_field_tag('end_date', end_date)
    =submit_tag("Export Results")
    = javascript_include_tag(:defaults, "jquery.flot.min.js", "jquery.flot.selection.min.js","jquery.flot.navigate.min.js")
  
  
  :css
    div.zobutton {
        font-size: smaller;
        color: #999;
        background-color: #eee;
        padding: 4px;
    }
     .zobutton {
        position: absolute;
        cursor: pointer;
    }

    div.zibutton {
        font-size: smaller;
        color: #999;
        background-color: #eee;
        padding: 2px;
    }
     .zibutton {
        position: absolute;
        cursor: pointer;
    }
    
  :javascript
    dojo.require("dijit.dijit");
    dojo.require("dijit.Dialog");
    dojo.require("dijit.form.Form");
    dojo.require("dijit.form.Button");
    dojo.require("dojox.form.Uploader");
    dojo.require("dojox.grid.EnhancedGrid");
    dojo.require("dojox.grid.enhanced.plugins.NestedSorting");
    dojo.require("dojox.grid.enhanced.plugins.Filter");
    dojo.require("dojo.data.ItemFileReadStore");
    dojo.require("dijit.layout.TabContainer");
    dojo.require("dojox.grid.enhanced.plugins.IndirectSelection");
    dojo.require("dojox.grid.enhanced.plugins.Pagination");
    //dojo.require("dojox.charting.Chart2D");
    //dojo.require("dojox.charting.DataChart");
    dojo.require("dojo.data.ItemFileWriteStore");
    //dojo.require("dojox.charting.StoreSeries");
    //dojo.require("dojox.charting.DataSeries");
    //dojo.require("dojo.store.Observable");
    //dojo.require("dojo.store.Memory");
    //dojo.require("dojox.charting.themes.Claro");
    dojo.require("dojo.data.ItemFileWriteStore");
    dojo.require("dojox.grid.enhanced.plugins.exporter.CSVWriter");

    var value_data = #{data_vals.to_json};
    var data = #{graph_data.as_json};
    for(var i=0;i<value_data.length;i++)
      value_data[i].idx = i;
    
    var values_json = {identifier: 'id', label: 'name', items: value_data };
    var value_store = new dojo.data.ItemFileReadStore({data: values_json});
    
    var val_store = new dojo.data.ItemFileReadStore({data: values_json});
    var dvalue_store = dojo.store.Observable(new dojo.store.Memory({
        data: {
            identifier: "id",
            label: "data values",
            items: value_data
        }
    }));
    //var chart1 = new dojox.charting.Chart2D("simplechart");
    function trans1(store, item){
      // let's create our object
      var o = {
        x: store.getValue(item, "local_date_time"),
        y: store.getValue(item, "data_value")
      };
      return o;
    }
    
    //chart1.addPlot("default", {type: "Lines"});
    //chart1.addAxis("x");
    //chart1.addAxis("y", {vertical: true});
    //var series = new dojox.charting.DataSeries(value_store, { query: {id:"*"}}, trans1);
    //chart1.addSeries(value_data, {query: {id: "*"}}, trans1(value_data, ));
    //chart1.addSeries("DataValues", new dojox.charting.StoreSeries(dvalue_store, { query: { id: "*" } }, "local_date_time", "data_value"));
    //chart1.addSeries("Series 1", series);
    //chart1.render();

    //chart = new dojox.charting.DataChart("chartDiv" ,{type:dojox.charting.plot2d.Scatter,xaxis:{labelFunc:"seriesLabels"}});
    //chart.setStore(value_store, {symbol:"*"}, "data_value");  //  <-- single value property
    // set the layout structure:
    
    function exportAll() {
        dijit.byId("val_grid").exportGrid("csv", function(str) {
            dojo.byId("output").value = str;
        });
    };
    function exportSelected() {
        var str = dijit.byId("val_grid").exportSelected("csv");
        dojo.byId("output").value = str;
    };
    
    function getProperDate(local_date_time, rowIndex){
      return local_date_time.slice(0,local_date_time.length-6);
    }
    
    var val_layout = [{
       field: 'local_date_time',
       name: 'Timestamp',
       width: '200px'
    },
    {
       field: 'vertical_offset',
       name: 'Vertical Offset',
       width: 'auto'
    },
    {
       field: 'data_value',
       name: 'Value',
       width: 'auto'
    },
    {
       field: 'string_value',
       name: 'Value(string format)',
       width: 'auto'
    },
    {
       field: 'quality_control_level',
       name: 'QC Level',
       width: 'auto'
    },
    {
       field: 'published',
       name: 'Published',
       width: 'auto'
    },
    {
       field: 'datatype',
       name: 'DataType',
       width: 'auto'
    },
    ];

    // create a new grid:
    var val_grid = new dojox.grid.EnhancedGrid({
       store: val_store,
       clientSort: true,
       rowSelector: '20px',
       structure: val_layout,
       style: 'width:95%;',
       plugins: {filter:true, pagination:true, exporter:true
       },
       onSelected: function(idx) {
         var item = this.getItem(idx);
         var idx = parseInt(item.idx.toString());
         console.log('SELECT:',item);
         var point = data[idx];
         console.log('SELECT-PT:',point);
         /**
         var pg_pos = plot.pointOffset({x:point[0],y:point[1]})
         var pageX = plot.offset().left+pg_pos.left-20;
         var pageY = plot.offset().top+pg_pos.top-20;
         plot.unhighlight();
         plot.highlight(0,idx);
         
         $("#tooltip").remove();
         var x = point[0].toFixed(2),
             y = point[1].toFixed(2);
             var mEpoch = x; // convert to milliseconds (Epoch is usually expressed in seconds, but Javascript uses Milliseconds)
             dDate = new Date();
             dDate.setTime(mEpoch);
         showTooltip(pageX, pageY,
           //*****You will need to change the sensor name here to the appropriate one selected above
                    dDate.toLocaleString() + " = " + y + " " + "#{variable}|#{units}" );
         //**/
       }
    },
    document.createElement('div'));

    // append the new grid to the div "gridContainer":
    //dojo.byId("gridContainer").appendChild(val_grid.domNode);
    $('##{tabId}_search_results #gridContainer').append(val_grid.domNode);

    // Call startup, in order to render the grid:
    val_grid.startup();
    
    var plot = $.plot($("##{tabId}_search_results #placeholder"), [data],{
           series: {
               color : "blue",
               lines: { show: true },
               points: { show: true }
              },

           grid:  { hoverable: true, clickable: true },
           xaxis: { mode: "time" },
           pan:   { interactive: true },
           zoom: {interative: true}
    });

    // add zoom out button 
    $('<div class="zobutton" style="right:20px;top:20px">-</div>').appendTo($("#placeholder")).click(function (e) {
       e.preventDefault();
       plot.zoomOut();
    });
    $('<div class="zibutton" style="right:20px;top:43px">+</div>').appendTo($("#placeholder")).click(function (e) {
       e.preventDefault();
       plot.zoom();
    });

    //Function ShowToolTip and previousPoint allow the hover function to display
     //a message for each data point on the graph when the cursor hoversover
     
     //I would only mess with the css if you really need to otherwise this
     //shouldn't need any modification
     function showTooltip(x, y, contents) {
         $('<div id="tooltip">' + contents + '</div>').css( {
             position: 'absolute',
             display: 'none',
             top: y + 5,
             left: x + 5,
             border: '1px solid #fdd',
             padding: '2px',
             'background-color': '#fee',
             opacity: 0.80
         }).appendTo("body").fadeIn(200);
     };

     //Most of this should remain the same
     //NOTE-- the time string for #x is in UTC format and currently is in GMT time
     var previousPoint = null;
     
     $("##{tabId}_search_results #placeholder").bind("plothover", function (event, pos, item) {
         var mEpoch = pos.x; // convert to milliseconds (Epoch is usually expressed in seconds, but Javascript uses Milliseconds)
         dDate = new Date();
         dDate.setTime(mEpoch);
         $("#x").text(dDate.toLocaleString());
         $("#y").text(pos.y);

         if (item) {
             if (previousPoint != item.datapoint) {
                 previousPoint = item.datapoint;
                 $("#tooltip").remove();
                 var x = item.datapoint[0].toFixed(2),
                     y = item.datapoint[1].toFixed(2);
                     var mEpoch = x; // convert to milliseconds (Epoch is usually expressed in seconds, but Javascript uses Milliseconds)
                     dDate = new Date();
                     dDate.setTime(mEpoch);
                 showTooltip(item.pageX, item.pageY,
                   //*****You will need to change the sensor name here to the appropriate one selected above
                            dDate.toLocaleString() + " = " + y + " " + "#{variable}|#{units}" );
             }
         } else {
             $("#tooltip").remove();
             previousPoint = null;            
         }
     });
  %h3   
    ="#{variable}|#{units}"
  -#simplechart{:style=>"width: 250px; height: 150px;"}
  -#chartDiv{:style=>"width: 250px; height: 150px;"}
  #placeholder{:style=>"width:600px;height:300px;"}
  -#=render_widget :flot_graph, :display, :variable=>variable, :data => graph_data
  -##value_store{:dojoType=>"dojo.data.ItemFileReadStore", :jsId=>"pvalues", :data=>"values_json"}
  -#%table{:dojoType=>"dojox.grid.EnhancedGrid", :plugins=> "{filter:true}",  :store=>"value_store", :clientSort=>"true", :style=>"width: 700px; height: 400px;", :jsId=>"ValueDisplayGrid", :id=>"ValueDisplayGrid", :title=>"Sites"}
  -#%thead
  -#%tr
  -#%th{:field=>"local_date_time", :width=>"190px", :filterable=>true} Timestamp
  -#%th{:field=>"vertical_offset", :width=>"130px", :filterable=>true} Vertical Offset
  -#%th{:field=>"data_value", :width=>"100px", :filterable=>true} Value
  %br
  #gridContainer{:style=>"width:900px;height:300px;"}
  -# %button{:onclick=>"exportAll()"}
  -#   Export all to CSV
  -# %button{:onclick=>"exportSelected()"}
  -#   Export Selected Rows to CSV
  -# %br
  -# %textarea{:id=>"output"}

  -# -i=0
  -# %table
  -#   %tr
  -#     -column_array.each do |col|
  -#       %th
  -#         =col[0]
  -#   -row_array.each do |row|
  -#     -i=1-i
  -#     %tr{:class=>"row#{i}"}
  -#       -row.each do |col|
  -#         %td{:class =>"search-results"}
  -#           =col
:javascript
  dojo.addOnLoad(function() {
    
  });