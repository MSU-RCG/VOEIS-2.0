= javascript_include_tag 'underscore.js', 'backbone.js','jquery-ui-1.8.11.custom.min.js', 'filter.js', 'parallel-coordinates.js','slickgrid/jquery.event.drag-2.0.min.js', 'slickgrid/slick.core.js','slickgrid/slick.grid.js','slickgrid/slick.dataview.js','slickgrid/slick.pager.js', 'grid.js'

= stylesheet_link_tag 'slick.grid.css', 'parallel-coordinate.css'
:javascript
  $(window).ready(function(){ 
    console.log('DONE LOADING GRAPH');
    drawGraph();
  });

:css
  ##{@tabId}_graph {
    position: relative;
    margin: auto;
  }

  #title {
    position: absolute;
    top: 70px;
    left: 200px;
    padding: 10px;
    background: white;
  }

  large {
    font-size: medium;
  }
%h3{:style=>"margin-top:0;"}
  Search Results
  [#{@tabId[-3,3]}]
  
%strong
  SEARCH DATES:
  -if !@start_date.nil?
    -if @start_date > @end_date
      ERROR - start date should not come after end date
    -else
      = @start_date.to_date.to_formatted_s(:long).gsub('00:00','')
      &ndash;
      = @end_date.to_date.to_formatted_s(:long).gsub('00:00','')
  -else
    ERROR - invalid date entry

%p
  %strong SEARCH URL:
  #{request.url}
#pc-main
  %h3 Parallel Coordinates
  #parallel-coordinates
  #grid-content
    #myGrid
    

:javascript
  
  console.log('SEARCH-RESULT TAB-ID: #{@tabId}');
  
  function exportAll(){
      #{@tabId}_data.searchGrid.exportGrid("csv", function(str){
          dojo.byId("export_data").value = str;
          document.forms[0].submit()
      });
  };
  
  function exportSelected(){                
      $('#export_data').val(#{@tabId}_data.searchGrid.exportSelected("csv",function(str){}))
      document.forms[0].submit()
  };
  
  //######################
  // CREATE PARALLEL GRAPH
  function drawGraph() {
    var dimensions = new Filter();

    dimensions.set({data: #{@parallel_results.to_json}});

    var parallel = new Parallel_coordinates ({
      title: 'Multidimensional Query - Parallel Coordinates',
      model: dimensions,
      el: document.getElementById('parallel-coordinates'),
      columns: [
        'timestamp',#{@variables.map{|v| '"var_%s"' % [v.id]}.join(",")}
      ],
      alias: {
        'timestamp': 'Time (YYYYMMDDhhmmss)',
        #{@variables.map{|v| '"var_%s": "%s (%s)"' % [v.id, v.variable_name, @unit_names[v.variable_units_id]]}.join(",")}
      },
      type: {
        'four': 'category'
      },
      width: 1360,
      height: 300,
      gutter: { x: 100, y: 50 },
    });

    var slicky = new grid({
      model: dimensions,
      width: 1360,
      height: 400,
      columns: [
        'time',#{@variables.map{|v| '"var_%s"' % [v.id]}.join(",")}
      ],
      alias: {
        'time': 'Time',
         #{@variables.map{|v| '"var_%s": "%s (%s)"' % [v.id, v.variable_name, @unit_names[v.variable_units_id]]}.join(",")}
      }
    });

    parallel.update();
    slicky.update();
    
  }


